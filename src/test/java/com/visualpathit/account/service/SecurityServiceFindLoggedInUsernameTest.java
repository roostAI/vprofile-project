
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-vprofile using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=findLoggedInUsername_005fadf9a2
ROOST_METHOD_SIG_HASH=findLoggedInUsername_c6f2366225

"""
Scenario 1: Successful fetching of Logged-in User's Username

Details:
  TestName: successfulFetchingOfLoggedInUsername
  Description: The test is aimed to validate if the method ‘findLoggedInUsername’ correctly fetches the username of the currently logged-in user.
  Execution:
    Arrange: A user "Test User" is logged-in.
    Act: Invoke the findLoggedInUsername method.
    Assert: Assert the username returned is "Test User".
  Validation:
    This test verifies if the correct username is returned when there is a logged-in user. It is crucial to verify if the username fetched is correct in order to maintain the user context across the application.

Scenario 2: No User Logged-in

Details:
  TestName: findLoggedInUsernameWithoutLoggedinUser
  Description: This test is designed to verify the behavior of the 'findLoggedInUsername()' method when there is no logged-in user.
  Execution:
    Arrange: No user login action performed.
    Act: Invoke the findLoggedInUsername method.
    Assert: Assert the return value is null or an applicable "not logged-in" message.
  Validation:
    This test case is meant to validate how the system behaves when there is no logged-in user. The expected behavior might be returning a null value or a specific "not logged-in" message which would help in triggering appropriate actions to lead the user to login.

Scenario 3: Logged-in User Logged out

Details:
  TestName: fetchingLoggedOutUserUsername
  Description: This test is to check the response of ‘findLoggedInUsername’ method when the logged-in user has logged out.
  Execution:
    Arrange: User "Test User" logs in and then logs out.
    Act: Invoke the findLoggedInUsername method.
    Assert: Assert that the return value is null or an applicable "not logged-in" message.
  Validation:
    This test verifies if the method correctly responds when a previously logged-in user has logged out. The expected result could be a null value or a specific "not logged-in" message, serving as an indicator that the user needs to login again.
"""
*/

// ********RoostGPT********

package com.visualpathit.account.service;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import org.junit.jupiter.api.*;

public class SecurityServiceFindLoggedInUsernameTest {

	@InjectMocks
	SecurityService securityService;

	@Mock
	private UserDetailsService userDetailsService;

	@Test
	@Tag("valid")
	public void successfulFetchingOfLoggedInUsername() {
		String expectedUsername = "Test User";
		when(userDetailsService.loadUserByUsername(anyString()))
			.thenReturn(new User(expectedUsername, "", new ArrayList<>()));
		assertEquals(expectedUsername, securityService.findLoggedInUsername());
	}

	@Test
    @Tag("invalid")
    public void findLoggedInUsernameWithoutLoggedinUser() {
        when(userDetailsService.loadUserByUsername(anyString())).thenReturn(null);
        assertNull(securityService.findLoggedInUsername());
    }

	@Test
	@Tag("invalid")
	public void fetchingLoggedOutUserUsername() {
		String expectedUsername = "Test User";
		when(userDetailsService.loadUserByUsername(anyString()))
			.thenReturn(new User(expectedUsername, "", new ArrayList<>()));
		securityService.autologin(expectedUsername, "TestPassword");
		securityService.logout();
		assertNull(securityService.findLoggedInUsername());
	}

}